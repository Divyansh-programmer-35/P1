1. Define a function partition(arr, low, high)
    1.1. Set pivot as the last element of the array
    1.2. Initialize i as low - 1
    1.3. Iterate from low to high - 1
        1.3.1. If arr[j][1] <= pivot, increment i and swap arr[i] with arr[j]
    1.4. Swap arr[i + 1] with arr[high]
    1.5. Return i + 1

2. Define a function quicksort(arr, low, high)
    2.1. If low is less than high
        2.1.1. Get the partition index using partition function
        2.1.2. Recursively call quicksort for the sub-arrays before and after the partition index

3. Define a function radix(dict)
    3.1. Find the maximum value in the dictionary
    3.2. Initialize exp to 1
    3.3. Iterate while exp is less than or equal to the maximum value
        3.3.1. Initialize a list of lists di with 10 empty lists
        3.3.2. Iterate through each key-value pair in the dictionary
            3.3.2.1. Get the digit at the current position by modulo and integer division
            3.3.2.2. Append the key-value pair to the corresponding digit list in di
        3.3.3. Reconstruct the dictionary from the digit lists in di
        3.3.4. Multiply exp by 10
    3.4. Return the sorted dictionary

4. Define a function generate_random_dict(size)
    4.1. Create an empty dictionary
    4.2. Iterate from 0 to size - 1
        4.2.1. Add a random key-value pair to the dictionary
    4.3. Return the dictionary

5. Define an empty dictionary d

6. Define an array p containing paths of images

7. Iterate through each image path in p
    7.1. Read the image and resize it
    7.2. Convert the image to grayscale and blur it
    7.3. Apply Canny edge detection and find contours
    7.4. Draw contours on the image and append the number of contours to a list n

8. Iterate through each image path and number of contours, and add them to dictionary d

9. Sort the items in dictionary d using quicksort and print them

10. Sort the items in dictionary d using radix sort and print them

11. Measure the execution time for different input sizes
    11.1. Generate a random dictionary with the current input size
    11.2. Measure the execution time for radix sort and quicksort
    11.3. Print the input size and corresponding execution times



